onehot_test[counter,y] <- 1
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test), ncol=max(y_test))#
counter <- 1#
for(y in y_test){#
	onehot_test[counter,y] <- 1#
	counter <- counter+1#
}
onehot_test
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test), ncol=max(y_test))#
counter <- 1#
for(y in y_test){#
	onehot_test[counter,y] <- 1#
	counter <- counter+1#
}
onehot_test
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test), ncol=max(y_test))#
counter <- 1#
for(y in y_test){#
	onehot_test[counter,y] <- 1#
	print(y)#
	counter <- counter+1#
}
print(y, counter)
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test), ncol=max(y_test))#
counter <- 1#
for(y in y_test){#
	onehot_test[counter,y] <- 1#
	print(y, counter)#
	counter <- counter+1#
}#
onehot_train = matrix(nrow=dim(y_train), ncol=max(y_train))
onehot_test <- matrix(0L, nrow=dim(y_test), ncol=max(y_test))#
counter <- 1#
for(y in y_test){#
	onehot_test[counter,y] <- 1#
	print(counter)#
	counter <- counter+1#
}
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test), ncol=max(y_test))#
counter <- 1#
for(y in 1:dim(y_test)){#
	onehot_test[counter,y_test[y]] <- 1#
	print(counter)#
	counter <- counter+1#
}
onehot_test
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test), ncol=max(y_test))#
counter <- 1#
for(y in 1:dim(y_test)){#
	onehot_test[counter,y_test[y]] = 1#
	print(counter)#
	counter <- counter+1#
}
onehot_test
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test), ncol=max(y_test))#
counter <- 1#
for(y in 1:dim(y_test)){#
	onehot_test[counter,y_test[y]] = 1#
	print(counter)#
	counter <- counter+1#
}
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test), ncol=max(y_test))#
counter <- 1#
for(y in 1:dim(y_test)){#
	onehot_test[counter][y_test[y]] = 1#
	print(counter)#
	counter <- counter+1#
}
onehot_test[1]
onehot_test[1,1]
onehot_test[12]
onehot_test[]
onehot_test[1,]
onehot_test[1,2]
onehot_test[1,2] <- 1
onehot_test[1,2]
onehot_test[1,]
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test), ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)){#
	onehot_test[counter,y_test[y]] <- 1#
	print(counter)#
	counter <- counter+1#
}
y_test[1]
y_test
y_test[1,]
y_test[1]
onehot_test <- matrix(0L, nrow=dim(y_test), ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)){#
	onehot_test[counter,y_test[y,]] <- 1#
	print(counter)#
	counter <- counter+1#
}
onehot_test
dim(y_test)
dim(y_test)[1]
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	print(counter)#
	counter <- counter+1#
}
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}
onehot_test
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]] <- 1#
	counter <- counter+1#
}
onehot_train
onehot_test
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
hidden_rbm <- 1000#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 10#
batchsize_nn <- 90#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]] <- 1#
	counter <- counter+1#
}#
#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, onehot_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- nn.test(nn, transformed_test, onehot_test, t = 0.5)#
configs = rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score))#
configs#
score
integer(3)
rbind(configs,integer(23))
configs['score']
configs['onehot'] <- integer(24)
configs['onehot'] <- integer(23)
configs
configs[22]
configs[22,]
configs[22,'onehot']
configs[22,'onehot'] <- 1
configs[23,'onehot'] <- 1
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 0#
#
hidden_rbm <- 1000#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
configs = rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score))#
configs#
score
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 0#
#
hidden_rbm <- 1000#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
configs = rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, onehot=onehot))#
configs#
score
configs[-c(25, 4, 6, 19), ]
configs <- configs[-c(25, 4, 6, 19), ]
configs
rownames(configs) <- NULL
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 1#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
configs = rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, onehot=onehot))#
configs#
score
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 1#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
configs = rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, onehot=onehot))#
configs#
score
nn.predict(nn, X_test)
nn
nn.predict(nn, X_train)
nn.predict(nn, X_test)
dim(transformed_test)
nn.predict(nn, transformed_test)
y_test[1,]
y_test[2,]
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 1#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
configs = rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, onehot=onehot))#
configs#
score
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 1#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
configs = rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, onehot=onehot))#
configs#
score
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
configs = rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, onehot=onehot))#
configs#
score
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
configs = rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, onehot=onehot))#
configs#
score
onehot <- 0
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 0#
#
hidden_rbm <- 1000#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
configs = rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, onehot=onehot))#
configs#
score
nn.predict(nn, transformed_test)
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
configs = rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, onehot=onehot))#
configs#
score
nn.predict(nn, transformed_test)
prediction <- nn.predict(nn, transformed_test)
prediction[1,]
max(prediction[1,])
which.is.max(predictions[1,])
max.col(predictions[1,])
max.col(prediction[1,])
max.row(prediction[1,])
which.max(prediction[1,])
prediction[1,]
real_prepdictons <- matrix(0L, ncol=dim(prediction)[0], nrow=dim(prediction)[1])
real_prepdictons <- matrix(0L, ncol=dim(prediction)[2], nrow=dim(prediction)[1])
dim(real_prepdictons)
dim(prediction)
real_predictions
real_prepdictons
prediction[1,]
which.max(prediction[1,])
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}
pred_norm
pred
y_test
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,] == which.max(y_test[i,]))){#
		score_norm <- score_nom +1#
	}#
}
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,] == which.max(y_test[i,]))){#
		score_norm <- score_norm +1#
	}#
}
score_nom
score_norm
score_norm <- score_norm/dim(y_test)[1]
score_norm
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]
score_norm
which.max(c(0,0,0,0,0))
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(c(0,0,0,0,0)) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]
score_norm
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(c(1))){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]
score_norm
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
score_norm
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
score_norm#
#
configs = rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, score_norm = score_norm, onehot=onehot))#
configs#
score
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 20#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
score_norm#
#
configs = rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, score_norm = score_norm, onehot=onehot))#
configs#
score
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 20#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
score_norm#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, score_norm = score_norm, onehot=onehot))#
configs#
score
dim(configs)
configs['score_norm'] <- integer(37)
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), score=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 20#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10,10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
score_norm#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, score_norm = score_norm, onehot=onehot))#
configs#
score
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), score=numeric(), score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 20#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10,5)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
score_norm#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, score_norm = score_norm, onehot=onehot))#
configs#
score
library(deepnet)#
#
# run this only once#
configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), score=numeric(), score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 20#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10,5)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
score_norm#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, score_norm = score_norm, onehot=onehot))#
configs#
score
library(deepnet)#
#
# run this only once#
configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), score=numeric(), score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 20#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10,5)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
score_norm#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, score_norm = score_norm, onehot=onehot))#
#
configs#
score
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])
pred <- nn.predict(nn, transformed_test)
score <- nn.test(nn, transformed_test, y_test, t = 0.9)
library(deepnet)#
#
# run this only once#
configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), score=numeric(), score_norm=numeric())#
#
onehot <- 1
library(deepnet)#
#
# run this only once#
configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), score=numeric(), score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 20#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10,5)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]
library(deepnet)#
#
# run this only once#
configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=integer(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), score=numeric(), score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 20#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10,5)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
score_norm#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=hidden_nn, lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, score=score, score_norm = score_norm, onehot=onehot))#
#
configs#
score
paste(c(1,2,3,4), collapse=" ")
string()
character()
library(deepnet)#
#
# run this only once#
configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), score=numeric(), score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 20#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10,5)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, score=score, score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), score=numeric(), score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, score=score, score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 1#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 20#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 5#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 1#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 1#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 3#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 3#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(y_test)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 1000#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
pred
pred_norm
y_test
sum(pred_norm$3)
sum(pred_norm[,3])
dim(pred_norm)
sum(y_test[,3])
sum(y_test[,1])
sum(y_test[,2])
sum(y_test[,4])
sum(y_train[,4])
sum(y_train[,1])
sum(y_train[,2])
sum(y_train[,3])
sum(y_train[,4])
sum(y_train[,5])
print("######### hyper paramenters and error scores ###########")
print("######### hyper paramenters and error scores ###########")#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))
print("######### hyper paramenters and error scores ###########")#
configs
print("######### hyper paramenters and error scores ###########", configs)
library(deepnet)
library(deepnet)
clean()
clear()
clear
clean
library(deepnet)#
#
# run this only once#
 configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
 configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.9)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
pred_norm
pred
y_test
sum(y_test[,3])
sum(y_test[,3])
dim(y_test)
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- score_norm/dim(pred)[1]-1#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
pred_norm
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 90#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
pred_norm
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 90#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 200#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 200#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 200#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 200#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 200#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 1#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 200#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 200#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 3#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 200#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 200#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 200#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
pred_norm
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 200#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 3#
batchsize_nn <- 200#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
pred_norm
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 300#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 300#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 300#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 300#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 300#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 300#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 300#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 300#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 300#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 300#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 300#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 300#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
#library(deepnet)#
#
# run this only once#
# configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 300#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 300#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
# run this only once#
if(exists(configs)){#
	library(deepnet)#
	configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
}#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 300#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 300#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
#
configs
predict_list <-list()
predict_norm <- list()#
	nn_list <- list()
# run this only once#
if(exists(configs)){#
	library(deepnet)#
	configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
	predict_list <- list()#
	predict_norm <- list()#
	nn_list <- list()#
}#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 300#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 300#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
predict_list[dim(configs)[1]] <- pred#
predict_norm[dim(configs)[1]] <- pred_norm#
nn_list[dim(configs)[1]] <- nn#
#
configs
# run this only once#
if(exists(configs)){#
	library(deepnet)#
	configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
	predict_list <- list()#
	predict_norm <- list()#
	nn_list <- list()#
}#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 300#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 300#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
predict_list[dim(configs)[1]] <- pred#
predict_norm[dim(configs)[1]] <- pred_norm#
nn_list[dim(configs)[1]] <- nn#
#
configs
# run this only once#
if(exists(configs)){#
	library(deepnet)#
	configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
	predict_list <- list()#
	predict_norm <- list()#
	nn_list <- list()#
}#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 300#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 300#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
predict_list[dim(configs)[1]] <- pred#
predict_norm[dim(configs)[1]] <- pred_norm#
nn_list[dim(configs)[1]] <- nn#
#
configs
exists(configs)
exists("configs")
# run this only once#
if(exists("configs")){#
	library(deepnet)#
	configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
	predict_list <- list()#
	predict_norm <- list()#
	nn_list <- list()#
}#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 300#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 300#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
predict_list[dim(configs)[1]] <- pred#
predict_norm[dim(configs)[1]] <- pred_norm#
nn_list[dim(configs)[1]] <- nn#
#
configs
# run this only once#
if(exists("configs") == F){#
	library(deepnet)#
	configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
	predict_list <- list()#
	predict_norm <- list()#
	nn_list <- list()#
}#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 300#
learningrate_rbm <- 0.001#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.001#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 300#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
predict_list[dim(configs)[1]] <- pred#
predict_norm[dim(configs)[1]] <- pred_norm#
nn_list[dim(configs)[1]] <- nn#
#
configs
predict_list[dim(configs)[1]]
dim(configs)[1]
pred
d = list(pred)
d
dim(d)
# run this only once#
if(exists("configs") == F){#
	library(deepnet)#
	configs = data.frame(hidden_rbm=integer(), numempochs_rbm=integer(), batchsize_rbm=integer(), lr_rbm=numeric(), cd=integer(), hidden_nn=character(), lr_nn=numeric(), numepochs_nn=integer(), batchsize_nn=numeric(), onehot=integer(), err_score=numeric(), err_score_norm=numeric())#
	predict_list <- list()#
	predict_norm <- list()#
	nn_list <- list()#
}#
onehot <- 1#
#
hidden_rbm <- 100#
numepochs_rbm <- 10#
batchsize_rbm <- 100#
learningrate_rbm <- 0.01#
learningrate_scale_rbm <- 0.9#
cd <- 10#
#
hidden_nn <- c(10)#
learningrate_nn <- 0.01#
learningrate_scale_nn <- 0.9#
numepochs_nn <- 10#
batchsize_nn <- 100#
#
X_train <- read.csv(file="../X_train.csv", header=T, sep=",", row.names=1)#
X_test <- read.csv(file="../X_test.csv", header=T, sep=",", row.names=1)#
y_train <- read.csv(file="../y_train.csv", header=T, sep=",", row.names=1)#
y_test <- read.csv(file="../y_test.csv", header=T, sep=",", row.names=1)#
#
X_train <- X_train[1:939,]#
X_test <- X_test[1:313,]#
#
# trying one hot encoding#
onehot_test <- matrix(0L, nrow=dim(y_test)[1], ncol=max(y_test)+1)#
counter <- 1#
for(y in 1:dim(y_test)[1]){#
	onehot_test[counter,y_test[y,]] <- 1#
	counter <- counter+1#
}#
# trying one hot encoding#
onehot_train <- matrix(0L, nrow=dim(y_train)[1], ncol=max(y_train)+1)#
counter <- 1#
for(y in 1:dim(y_train)[1]){#
	onehot_train[counter, y_train[y,]+1] <- 1#
	counter <- counter+1#
}#
X_train <- as.matrix(X_train)#
X_test <- as.matrix(X_test)#
y_train <- as.matrix(y_train)#
y_test <- as.matrix(y_test)#
#
if(onehot){#
	y_test <- onehot_test#
	y_train <- onehot_train#
}#
#
rbm <- rbm.train(x=X_train, hidden=hidden_rbm, numepochs = numepochs_rbm, batchsize = batchsize_rbm, learningrate = learningrate_rbm, learningrate_scale = learningrate_scale_rbm, momentum = 0.5, visible_type = "bin", hidden_type = "bin", cd = cd)#
#
transformed_train <- rbm.up(rbm, X_train)#
transformed_test <- rbm.up(rbm, X_test)#
#
nn = nn.train(x=transformed_train, y_train, initW = NULL, initB = NULL, hidden = hidden_nn, activationfun = "sigm", learningrate = learningrate_nn, momentum = 0.5, learningrate_scale = learningrate_scale_nn, output = "sigm", numepochs = numepochs_nn, batchsize = batchsize_nn, hidden_dropout = 0, visible_dropout = 0)#
#
score <- 0#
score <- nn.test(nn, transformed_test, y_test, t = 0.5)#
#
pred <- nn.predict(nn, transformed_test)#
pred_norm <- matrix(0L, nrow=dim(pred)[1], ncol=dim(pred)[2])#
for(i in 1:dim(pred)[1]){#
	max_row <- which.max(pred[i,])#
	pred_norm[i,max_row] <- 1#
}#
#
score_norm <- 0#
for(i in 1:dim(pred_norm)[1]){#
	if(which.max(pred_norm[i,]) == which.max(y_test[i,])){#
		score_norm <- score_norm +1#
	}#
}#
score_norm <- 1- score_norm/dim(pred)[1]#
#
configs <- rbind(configs,data.frame(hidden_rbm=hidden_rbm, numempochs_rbm = numepochs_rbm, batchsize_rbm=batchsize_rbm, lr_rbm=learningrate_rbm, cd=cd, hidden_nn=paste(hidden_nn,collapse=" "), lr_nn=learningrate_nn, numepochs_nn=numepochs_nn, batchsize_nn=batchsize_nn, onehot=onehot, err_score=score, err_score_norm = score_norm))#
predict_list[dim(configs)[1]] <- pred#
predict_norm[dim(configs)[1]] <- pred_norm#
nn_list[dim(configs)[1]] <- nn#
#
configs
dim(d)
d
d <- list(pred)
dim(d)
